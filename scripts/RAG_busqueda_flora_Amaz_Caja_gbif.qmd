---
title: "Busqueda Registros Flora en GBIF"
author: "Robert Arteaga"
format: 
  html:
    theme:
      dark: darkly
editor: visual
---

# Informacion Inicial

Documentacion referencial de uso de informacion de gbif y `rgbif`

<https://techdocs.gbif.org/en/data-use/>

<https://techdocs.gbif.org/en/openapi/>\

# Paquetes

Si se usa por pri

```{r}
#
library(tidyverse)  # manipulacion (incluye dlyr y ggplot2)
library(sf)         # manejo informacion geografica y espacial
#we use a library for peru
#[https://github.com/musajajorge/mapsPERU]
library(countrycode)# códigos de países
library(CoordinateCleaner)# este paquete nos permite limpiar los registros espaciamente
library(dplyr)# manipulación de datos
library(rgbif)# para extraer datos de rgif
library(sf)# manejos de datos vectoriales espaciales
library(rnaturalearth)# datos de mapas
#library(rnaturalearthhires)# datos de mapas de alta resolución
library(remotes) #Descarga e instala paquetes R almacenados en 'GitHub', 'GitLab', 'Bitbucket', 'Bioconductor' o repositorios simples 'subversion' o 'git'.
devtools::install_github("musajajorge/mapsPERU")# solo hacer la primera vez, luego comentar con un "#" antes de la oración

# Packages names as a character vector
packages <- c("tidyverse", "rgbif", 
              "sf","remotes",
              "rnaturalearth",
              "rnaturalearthdata",
              "mapsPERU")# vectors con los nombres de los paquetes


# Install packages not yet installed [for the first time]
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
 install.packages(packages[!installed_packages])
}# En caso reconozca paquetes que no están instalados, este pedazo de código los instala, comentar (con #) después de la primera vez

# Packages loading
invisible(lapply(packages, require, character.only = TRUE)) # remove "invisible" to see whether the packages are loaded/available. 

```

# 1) Definir poligono de referencia para busqueda

Se debe definir un poligono de referencia para la búsqueda. Se propone el siguiente a modo de prueba.

Adicionalmente, se crea un KML para visualizar en google earth.

```{r}

polygon_wkt <- 
 "POLYGON((
-77.5 -7.8,
-77.0 -6.0,
-77.5 -3.0,
-78.4 -3.0,
-79.0 -4.6,
-80.0 -4.0,
-80.0 -6.0,
-79.5 -7.7,
-77.5 -7.8))"

# crear objeto sf
polygon_sf <- st_as_sfc(polygon_wkt, 
                        crs = 4326)

# grabar como KML
#st_write(polygon_sf, "amazonas_cajamarca.kml", driver = "KML", append = FALSE)

```

# 2) Busqueda de Información

La estrategia usada comprende bscar registros de plantas de grupos Liliopsida y Magnoliopsida. El proceso toma aproximadamente 2 horas en ser completado (pero puede variar de acuerdo a la rapidez y características de la computadora). Polígonos más grandes y complejos pueden tomar más tiempo en ser desarrollados.

## 2.1) Liliopsida

13239 registros de liliopsida

Retirar las marcas de comentarios para realizar la busqueda (aprox 0.5 horas). [@robert Incluir la fecha de la búsqueda, esto es importante porque los repositorios cambian y esto se tiene que añadir en la metodología.]

```{r}

start_time <- Sys.time()
 liliopsida_records <- occ_data(
 taxonKey = 196,      # TaxonKey para Liliopsida (Monocots)
   geometry = polygon_wkt,
   limit = 99999       # ajustar el limte de obtencion de registros
)
end_time <- Sys.time()

diff_lilio_time <- difftime(end_time, start_time, units = "mins")

print(paste("Tiempo de Busqueda Liliopsida:", diff_lilio_time, "minutos", sep=" ")) #tiempo de busqueda de liliopsida

saveRDS(liliopsida_records, "output/gbif_data/liliopsida_records.rds")

```

Posterior al proceso de busqueda de liliopsida se graban en un archivo rds que reduce el tamaño.

```{r}
# liliopsida_records <- readRDS("./output/gbif_data/liliopsida_records.rds")# usar "../ [dos puntos, para imprimir/"rendering"]

liliopsida_records02 <- liliopsida_records
```

## 2.2) Magnoliopsida

81003 registros de magnoliopsida

Retirar las marcas de comentarios para realizar la busqueda (aprox 1.8 horas)

```{r}

 start_time <- Sys.time()
time01 <- Sys.time()
magnoliopsida_records <- occ_data(
 taxonKey = 220,      # TaxonKey para Magnoliopsida (eudicots)
  geometry = polygon_wkt,
  limit = 99999       # Adjust the limit for more records
)

end_time <- Sys.time()

diff_magno_time <- difftime(end_time, start_time, units = "mins")

print(paste("Tiempo de Busqueda Magnoliopsida:", diff_magno_time, "minutos", sep=" ")) #tiempo de busqueda de liliopsida

saveRDS(magnoliopsida_records, "output/gbif_data/magnoliopsida_records2.rds")


```

Posterior a la búsqueda se graba el objeto.

```{r}
# magnoliopsida_records <- readRDS("./output/gbif_data/magnoliopsida_records.rds")

magnoliopsida_records02 <- magnoliopsida_records
```

# 3) Filtrado de registros

Se debe de filtrar por separado para cada taxon. Hay diferencias en el numero de columnas consideradas. Aquí se filtra la información que se va a usar. Los criterios mínimos son:

-   Uso de especies como unidad mínima (evitar variedades, sub spp., etc).

-   La base del registro deben ser especímenes de herbario unicamente.

## 3.1) Liliopsida

```{r}
liliopsida_records03 <- 
  liliopsida_records02$data %>% 
  filter(taxonRank=="SPECIES") %>% 
  filter(basisOfRecord=="PRESERVED_SPECIMEN") %>% 
  filter(!is.na(decimalLatitude)) %>% 
  filter(!is.na(decimalLongitude))

```

## 3.2) Magnoliopsida

```{r}
magnoliopsida_records03 <- 
  magnoliopsida_records02$data %>% 
  filter(taxonRank=="SPECIES") %>% 
  filter(basisOfRecord=="PRESERVED_SPECIMEN") %>% 
  filter(!is.na(decimalLatitude)) %>% 
  filter(!is.na(decimalLongitude))

dim(magnoliopsida_records02$data)# 81003 registros
dim(magnoliopsida_records03)# 44708

```

# 3) Limpieza de registros

## 3.1) Limpieza de errores en registros

Hay varios paquetes para esto, ver las opciones mas amigables en cuanto a código (gator, coordinatecleaner, etc.). Aquí uso "CoordinateCleaner"

En el siguiente "chunk" leemos la data retirada por Robert, seleccionamos los campos de interés (columnas), y removemos registros sin coordenadas.

```{r}
# revise the data
dim(magnoliopsida_records03)

# select columns of interest
dat <- magnoliopsida_records03 %>%
  dplyr::select(species, decimalLongitude, 
                decimalLatitude, countryCode,
                individualCount,
                gbifID, family, taxonRank,
                coordinateUncertaintyInMeters,
                year, basisOfRecord, institutionCode,
                datasetName)

# remove records without coordinates
dat <- dat %>%
  filter(!is.na(decimalLongitude)) %>%
  filter(!is.na(decimalLatitude))

# compare how many records:
dim(magnoliopsida_records03)# none
dim(dat)
```

En el siguiente "chunk" hacemos un mapa de los registros en las regiones (la intensidad del color indica la cantidad de registros).

```{r mapa}

# convertir polygono to a "dataframe" que se puede plotear como polígono:
# ids <- factor(c("1.1"))
# positions <- data.frame(
#   id = rep(ids, each = 9),
#   x = c(-77.50,-79.5, -80, -80, -79, -78.4, -77.5, -77,-77.4),
# y = c(-7.8, -7.7, -6,-4, -4.6, -3, -3, -6,-7))

#plot data to get an overview
df <- map_REG# subset per regions

str(df)
unique(df$REGION)

df <- dplyr::filter(df, REGION=="Cajamarca"|
                      REGION=="Amazonas"|
                      REGION=="Piura")# filtering which regions

# Example of the regions only:
ggplot(df, aes(geometry=geometry)) +
  geom_sf(aes(fill = REGION)) +
  geom_text(data=df, 
            aes(coords_x, 
                coords_y, 
                group=NULL,
                label = ""), size=2.5) +
  labs(x="", y="") + 
  theme_classic()


# Plotting regions + data
ggplot() +
  geom_sf(data = df,
          aes(geometry=geometry,
              fill = REGION))+
  geom_point(data = dat,
             aes(x = decimalLongitude, 
                 y = decimalLatitude),
             colour = "darkred",
             size = 0.5,
             alpha = 0.05) +
  geom_text(data=df, 
            aes(coords_x, 
                coords_y, 
                group=NULL,
                label = ""), size=2.5) +
  xlab("Longitude")+ylab("Latitude") #+
  #geom_map(aes(map_id = positions$id), 
  #         map = positions) +
  #expand_limits(positions)


```

@robert aquí debe haber un falta de coincidencia entre los sistemas geográficos? Habría que ver, o revisar la extension y si corresponde a las regiones indicadas. Quizás si miras "str(df)", allí en la geometría puedes revisar si es cuestión de los límites o si es un problema de sistema de coordenadas geográficas.

En el siguiente "chunk" cambiamos el código de uso de abreviaciones de países (para que coincidan con las del paquete CoordinateCleaner), y encontramos los problemas (básicos).

```{r}
#convert country code from ISO2c to ISO3c
dat$countryCode <-  countrycode(dat$countryCode, 
                                origin =  'iso2c',
                                destination = 'iso3c')

#flag problems
dat <- data.frame(dat)
flags <- clean_coordinates(x = dat,
                           lon = "decimalLongitude", 
                           lat = "decimalLatitude",
                           countries = "countryCode",
                           species = "species",
                           tests = c("capitals", "centroids",
                                    "equal", "zeros", "countries")) # most test are on by default
```

Revisar el resultado:

```{r}
summary(flags)
plot(flags, lon = "decimalLongitude", lat = "decimalLatitude")
```

Se pueden hacer muchas cosas más, como por ejemplo remover los registros con baja precisión

```{r}

#Remove records with low coordinate precision
dat %>% 
  mutate(Uncertainty = coordinateUncertaintyInMeters / 1000) %>% 
  ggplot(aes(x = Uncertainty)) + 
  geom_histogram() +
  xlab("Coordinate uncertainty in meters") +
  theme_bw()

```

```{r}

dat_cl <- dat %>%
  filter(coordinateUncertaintyInMeters / 1000 <= 100 | is.na(coordinateUncertaintyInMeters))

# Remove unsuitable data sources, especially fossils 
# which are responsible for the majority of problems in this case
table(dat$basisOfRecord)

## HUMAN_OBSERVATION    MATERIAL_SAMPLE PRESERVED_SPECIMEN 
##              4979                  2                 19 

dat_cl <- filter(dat_cl, basisOfRecord == "HUMAN_OBSERVATION" | 
                         basisOfRecord == "OBSERVATION" |
                         basisOfRecord == "PRESERVED_SPECIMEN")

dim(dat)
dim(dat_cl)# bajó el número de registros
```

## 3.1) Ajuste taxonómico

El "taxonomic scrubing" se puede hacer con los paquetes WFO y LCVP, y comparar el resultado.

```{r}

```

# 4) Mapa de distribuciones

## 4.0) Mapa de Perú y Ecuador

```{r}
# world shapefile
world <- st_transform(ne_countries(scale = "medium", returnclass = "sf"), crs = 4326)

# Filter only Central American countries
sur_america01 <- world %>%
  filter(name %in% c("Peru","Ecuador"))

sur_america02 <- st_transform(sur_america01, crs = 4326)#Project

```

## 4.1) Mapa de Liliopsidas

Mapa de distribucuion espacial de Liliopsida para Cajamarca y Amazonas (basado en `polygon_wkt)`

```{r}

# Convertir informacion a formato espacial (sf)
lilio_sf <- st_as_sf(liliopsida_records03, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)

# Plot records
ggplot() +
  geom_sf(data = sur_america02, fill = "gray70", color = "gray70") +
  geom_sf(data = lilio_sf, aes(color = "Records"), size = 0.02, alpha = 0.7) +
  labs(title = "", x = "Longitude", y = "Latitude") +
  theme_light()

```

## 4.2) Mapa de Magnoliopsida

grafico de magnoliopsida

```{r}

magno_sf <- st_as_sf(magnoliopsida_records03, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)

# Plot records
ggplot() +
  geom_sf(data = sur_america02, fill = "gray70", color = "gray70") +
  geom_sf(data = magno_sf, aes(color = "Records"), size = 0.02, alpha = 0.7) +
  labs(title = "", x = "Longitude", y = "Latitude") +
  theme_light()

```
